generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  // local attributes
  id        BigInt   @id @default(autoincrement())
  name      String
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // foreign keys and related entityID arrays
  settingsID     Int?        @unique
  profileImageID BigInt?     @unique
  groups         GroupUser[]
  favoriteCards  Card[]

  // prisma intern 1:1 and 1:n relation definitions (not needed for queries)
  profileImage Image?    @relation(fields: [profileImageID], references: [id])
  settings     Settings? @relation(fields: [settingsID], references: [id])
}

model Group {
  // local attributes
  id           BigInt    @id @default(autoincrement())
  title        String
  description  String?
  isSolo       Boolean   @default(false)
  deletionDate DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // foreign keys and related entityID arrays
  thumbnailID BigInt?     @unique
  users       GroupUser[]
  cards       Card[]

  // prisma intern 1:1 and 1:n relation definitions (not needed for queries)
  thumbnail Image? @relation(fields: [thumbnailID], references: [id])
}

model Card {
  // local attributes
  id           BigInt    @id @default(autoincrement())
  title        String
  description  String?
  deletionDate DateTime?
  startDate    DateTime?
  endDate      DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // foreign keys and related entityID arrays
  groupId           BigInt?
  backgroundColorId Int
  images            Image[]
  quotes            Quote[]
  voiceRecordings   VoiceRecording[]
  favoriteOf        User[]

  // prisma intern 1:1 and 1:n relation definitions (not needed for queries)
  group           Group?          @relation(fields: [groupId], references: [id])
  backgroundColor BackgroundColor @relation(fields: [backgroundColorId], references: [id])
}

model Image {
  // local attributes
  id        BigInt   @id @default(autoincrement())
  url       String   @unique
  width     Int
  height    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // foreign keys and related entityID arrays
  cardId             BigInt?
  profileImageUserID User?
  thumnailForGroupID Group?
  originalID         BigInt? @unique
  scaledDownID       BigInt? @unique

  // prisma intern 1:1 and 1:n relation definitions (not needed for queries)
  card       Card?  @relation(fields: [cardId], references: [id])
  scaledDown Image? @relation("ImageScaling")
  original   Image? @relation("ImageScaling", fields: [originalID], references: [id])
}

model Quote {
  // local attributes
  id        BigInt   @id @default(autoincrement())
  text      String
  author    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // foreign keys and related entityID arrays
  cardId BigInt?

  // prisma intern 1:1 and 1:n relation definitions (not needed for queries)
  Card Card? @relation(fields: [cardId], references: [id])
}

model VoiceRecording {
  // local attributes
  id        BigInt   @id @default(autoincrement())
  url       String   @unique
  length    BigInt
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // foreign keys and related entityID arrays
  cardId BigInt?

  // prisma intern 1:1 and 1:n relation definitions (not needed for queries)
  Card Card? @relation(fields: [cardId], references: [id])
}

model BackgroundColor {
  // local attributes
  id        Int      @id @default(autoincrement())
  value     String   @unique
  darkText  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // foreign keys and related entityID arrays
  Card Card[]
}

model Settings {
  // local attributes
  id        Int      @id @default(autoincrement())
  userId    BigInt   @unique
  darkMode  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // foreign keys and related entityID arrays
  User User?
}

enum Status {
  ACTIVE_USER
  ADMIN
  JOIN_REQUESTED
  LEFT
  KICKED
}

model GroupUser {
  // local attributes
  id        BigInt   @id @default(autoincrement())
  status    Status   @default(ACTIVE_USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // foreign keys and related entityID arrays
  userId  BigInt
  groupId BigInt

  // prisma intern 1:1 and 1:n relation definitions (not needed for queries)
  user  User  @relation(fields: [userId], references: [id])
  group Group @relation(fields: [groupId], references: [id])

  // shared unique constraint
  @@unique([userId, groupId])
}
